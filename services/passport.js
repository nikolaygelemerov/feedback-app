const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

// Save the user.id in passport session
passport.serializeUser((user, done) => {
  done(null, user.id); // unique record id generated by mongo
  // serializing user by record id provides flexability to add multiple
  // providers (google, faceboo etc...)
});

// Get the user.id from passport session
passport.deserializeUser(async (id, done) => {
  try {
    const user = await User.findById(id);

    done(null, user);
  } catch (error) {
    console.error(error);
  }
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true // allow heroku proxy access our heroku server
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        // get already existing record
        const existingUser = await User.findOne({ googleId: profile.id });

        if (existingUser) {
          return done(null, existingUser); // we finished here, no error callback(null is passed)
        }

        const user = await new User({ googleId: profile.id }).save(); // initial new User model instance

        done(null, user); // model instance retrived from Db, same as new User but another instance
      } catch (error) {
        console.error(error);
      }
    }
  )
);
